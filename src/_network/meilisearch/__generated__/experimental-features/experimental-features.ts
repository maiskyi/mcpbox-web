/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * meilisearch
 * Meilisearch HTTP server
 * OpenAPI spec version: 1.15.2
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ResponseError,
  RuntimeTogglableFeatures
} from '../api.schemas';

import { customInstance } from '../../utils/orval/orval.utils';
import { customQueryOptions } from '../../utils/orval/orval.utils';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Get a list of all experimental features that can be activated via the /experimental-features route and whether or not they are currently activated.
 * @summary Get all experimental features
 */
export const getFeatures = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RuntimeTogglableFeatures>(
      {url: `/experimental-features`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFeaturesQueryKey = () => {
    return [`/experimental-features`] as const;
    }

    
export const useGetFeaturesInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getFeatures>>, TError = ResponseError>( options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getFeatures>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFeaturesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFeatures>>> = ({ signal }) => getFeatures(requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getFeatures>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFeaturesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getFeatures>>>
export type GetFeaturesInfiniteQueryError = ResponseError


/**
 * @summary Get all experimental features
 */

export function useGetFeaturesInfinite<TData = Awaited<ReturnType<typeof getFeatures>>, TError = ResponseError>(
  options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getFeatures>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetFeaturesInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetFeaturesQueryOptions = <TData = Awaited<ReturnType<typeof getFeatures>>, TError = ResponseError>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFeatures>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFeaturesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFeatures>>> = ({ signal }) => getFeatures(requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof getFeatures>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFeaturesQueryResult = NonNullable<Awaited<ReturnType<typeof getFeatures>>>
export type GetFeaturesQueryError = ResponseError


/**
 * @summary Get all experimental features
 */

export function useGetFeatures<TData = Awaited<ReturnType<typeof getFeatures>>, TError = ResponseError>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFeatures>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetFeaturesQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Activate or deactivate experimental features.
 * @summary Configure experimental features
 */
export const patchFeatures = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<RuntimeTogglableFeatures>(
      {url: `/experimental-features`, method: 'PATCH'
    },
      options);
    }
  


export const getPatchFeaturesMutationOptions = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchFeatures>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchFeatures>>, TError,void, TContext> => {

const mutationKey = ['patchFeatures'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchFeatures>>, void> = () => {
          

          return  patchFeatures(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchFeaturesMutationResult = NonNullable<Awaited<ReturnType<typeof patchFeatures>>>
    
    export type PatchFeaturesMutationError = ResponseError

    /**
 * @summary Configure experimental features
 */
export const usePatchFeatures = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchFeatures>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchFeatures>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPatchFeaturesMutationOptions(options);

      return useMutation(mutationOptions );
    }
    