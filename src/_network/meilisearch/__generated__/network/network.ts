/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * meilisearch
 * Meilisearch HTTP server
 * OpenAPI spec version: 1.15.2
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Network,
  ResponseError
} from '../api.schemas';

import { customInstance } from '../../utils/orval/orval.utils';
import { customQueryOptions } from '../../utils/orval/orval.utils';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Get a list of all Meilisearch instances currently known to this instance.
 * @summary Get network topology
 */
export const getNetwork = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Network>(
      {url: `/network`, method: 'GET', signal
    },
      options);
    }
  

export const getGetNetworkQueryKey = () => {
    return [`/network`] as const;
    }

    
export const useGetNetworkInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getNetwork>>, TError = ResponseError>( options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getNetwork>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNetworkQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNetwork>>> = ({ signal }) => getNetwork(requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getNetwork>>, TError, TData> & { queryKey: QueryKey }
}

export type GetNetworkInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getNetwork>>>
export type GetNetworkInfiniteQueryError = ResponseError


/**
 * @summary Get network topology
 */

export function useGetNetworkInfinite<TData = Awaited<ReturnType<typeof getNetwork>>, TError = ResponseError>(
  options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getNetwork>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetNetworkInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetNetworkQueryOptions = <TData = Awaited<ReturnType<typeof getNetwork>>, TError = ResponseError>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getNetwork>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNetworkQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNetwork>>> = ({ signal }) => getNetwork(requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof getNetwork>>, TError, TData> & { queryKey: QueryKey }
}

export type GetNetworkQueryResult = NonNullable<Awaited<ReturnType<typeof getNetwork>>>
export type GetNetworkQueryError = ResponseError


/**
 * @summary Get network topology
 */

export function useGetNetwork<TData = Awaited<ReturnType<typeof getNetwork>>, TError = ResponseError>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getNetwork>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetNetworkQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Add or remove nodes from network.
 * @summary Configure Network
 */
export const patchNetwork = (
    network: Network,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Network>(
      {url: `/network`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: network
    },
      options);
    }
  


export const getPatchNetworkMutationOptions = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchNetwork>>, TError,{data: Network}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchNetwork>>, TError,{data: Network}, TContext> => {

const mutationKey = ['patchNetwork'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchNetwork>>, {data: Network}> = (props) => {
          const {data} = props ?? {};

          return  patchNetwork(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchNetworkMutationResult = NonNullable<Awaited<ReturnType<typeof patchNetwork>>>
    export type PatchNetworkMutationBody = Network
    export type PatchNetworkMutationError = ResponseError

    /**
 * @summary Configure Network
 */
export const usePatchNetwork = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchNetwork>>, TError,{data: Network}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof patchNetwork>>,
        TError,
        {data: Network},
        TContext
      > => {

      const mutationOptions = getPatchNetworkMutationOptions(options);

      return useMutation(mutationOptions );
    }
    