/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * meilisearch
 * Meilisearch HTTP server
 * OpenAPI spec version: 1.15.2
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AllBatches,
  BatchView,
  GetBatchesParams,
  ResponseError
} from '../api.schemas';

import { customInstance } from '../../utils/orval/orval.utils';
import { customQueryOptions } from '../../utils/orval/orval.utils';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * List all batches, regardless of index. The batch objects are contained in the results array.
Batches are always returned in descending order of uid. This means that by default, the most recently created batch objects appear first.
Batch results are paginated and can be filtered with query parameters.
 * @summary Get batches
 */
export const getBatches = (
    params?: GetBatchesParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<AllBatches>(
      {url: `/batches`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetBatchesQueryKey = (params?: GetBatchesParams,) => {
    return [`/batches`, ...(params ? [params]: [])] as const;
    }

    
export const useGetBatchesInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getBatches>>, TError = ResponseError>(params?: GetBatchesParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBatches>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBatchesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBatches>>> = ({ signal, pageParam }) => getBatches({...params, 'skip': pageParam || params?.['skip']}, requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBatches>>, TError, TData> & { queryKey: QueryKey }
}

export type GetBatchesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getBatches>>>
export type GetBatchesInfiniteQueryError = ResponseError


/**
 * @summary Get batches
 */

export function useGetBatchesInfinite<TData = Awaited<ReturnType<typeof getBatches>>, TError = ResponseError>(
 params?: GetBatchesParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBatches>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetBatchesInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetBatchesQueryOptions = <TData = Awaited<ReturnType<typeof getBatches>>, TError = ResponseError>(params?: GetBatchesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBatches>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBatchesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBatches>>> = ({ signal }) => getBatches(params, requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof getBatches>>, TError, TData> & { queryKey: QueryKey }
}

export type GetBatchesQueryResult = NonNullable<Awaited<ReturnType<typeof getBatches>>>
export type GetBatchesQueryError = ResponseError


/**
 * @summary Get batches
 */

export function useGetBatches<TData = Awaited<ReturnType<typeof getBatches>>, TError = ResponseError>(
 params?: GetBatchesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBatches>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetBatchesQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get a single batch.
 * @summary Get one batch
 */
export const getBatch = (
    batchUid: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<BatchView>(
      {url: `/batches/${batchUid}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBatchQueryKey = (batchUid: string,) => {
    return [`/batches/${batchUid}`] as const;
    }

    
export const useGetBatchInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getBatch>>, TError = ResponseError>(batchUid: string, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBatch>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBatchQueryKey(batchUid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBatch>>> = ({ signal }) => getBatch(batchUid, requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBatch>>, TError, TData> & { queryKey: QueryKey }
}

export type GetBatchInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getBatch>>>
export type GetBatchInfiniteQueryError = ResponseError


/**
 * @summary Get one batch
 */

export function useGetBatchInfinite<TData = Awaited<ReturnType<typeof getBatch>>, TError = ResponseError>(
 batchUid: string, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBatch>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetBatchInfiniteQueryOptions(batchUid,options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetBatchQueryOptions = <TData = Awaited<ReturnType<typeof getBatch>>, TError = ResponseError>(batchUid: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBatch>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBatchQueryKey(batchUid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBatch>>> = ({ signal }) => getBatch(batchUid, requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof getBatch>>, TError, TData> & { queryKey: QueryKey }
}

export type GetBatchQueryResult = NonNullable<Awaited<ReturnType<typeof getBatch>>>
export type GetBatchQueryError = ResponseError


/**
 * @summary Get one batch
 */

export function useGetBatch<TData = Awaited<ReturnType<typeof getBatch>>, TError = ResponseError>(
 batchUid: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBatch>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetBatchQueryOptions(batchUid,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



