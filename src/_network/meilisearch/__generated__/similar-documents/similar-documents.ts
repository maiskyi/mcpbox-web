/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * meilisearch
 * Meilisearch HTTP server
 * OpenAPI spec version: 1.15.2
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ResponseError,
  SimilarGetParams,
  SimilarQuery,
  SimilarResult
} from '../api.schemas';

import { customInstance } from '../../utils/orval/orval.utils';
import { customQueryOptions } from '../../utils/orval/orval.utils';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Retrieve documents similar to a specific search result.
 * @summary Get similar documents with GET
 */
export const similarGet = (
    indexUid: string,
    params: SimilarGetParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SimilarResult>(
      {url: `/indexes/${indexUid}/similar`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSimilarGetQueryKey = (indexUid: string,
    params: SimilarGetParams,) => {
    return [`/indexes/${indexUid}/similar`, ...(params ? [params]: [])] as const;
    }

    
export const useSimilarGetInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof similarGet>>, TError = ResponseError>(indexUid: string,
    params: SimilarGetParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof similarGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSimilarGetQueryKey(indexUid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof similarGet>>> = ({ signal, pageParam }) => similarGet(indexUid,{...params, 'skip': pageParam || params?.['skip']}, requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseInfiniteQueryOptions<Awaited<ReturnType<typeof similarGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SimilarGetInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof similarGet>>>
export type SimilarGetInfiniteQueryError = ResponseError


/**
 * @summary Get similar documents with GET
 */

export function useSimilarGetInfinite<TData = Awaited<ReturnType<typeof similarGet>>, TError = ResponseError>(
 indexUid: string,
    params: SimilarGetParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof similarGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useSimilarGetInfiniteQueryOptions(indexUid,params,options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useSimilarGetQueryOptions = <TData = Awaited<ReturnType<typeof similarGet>>, TError = ResponseError>(indexUid: string,
    params: SimilarGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof similarGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSimilarGetQueryKey(indexUid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof similarGet>>> = ({ signal }) => similarGet(indexUid,params, requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof similarGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SimilarGetQueryResult = NonNullable<Awaited<ReturnType<typeof similarGet>>>
export type SimilarGetQueryError = ResponseError


/**
 * @summary Get similar documents with GET
 */

export function useSimilarGet<TData = Awaited<ReturnType<typeof similarGet>>, TError = ResponseError>(
 indexUid: string,
    params: SimilarGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof similarGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useSimilarGetQueryOptions(indexUid,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieve documents similar to a specific search result.
 * @summary Get similar documents with POST
 */
export const similarPost = (
    indexUid: string,
    similarQuery: SimilarQuery,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SimilarResult>(
      {url: `/indexes/${indexUid}/similar`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: similarQuery, signal
    },
      options);
    }
  


export const getSimilarPostMutationOptions = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof similarPost>>, TError,{indexUid: string;data: SimilarQuery}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof similarPost>>, TError,{indexUid: string;data: SimilarQuery}, TContext> => {

const mutationKey = ['similarPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof similarPost>>, {indexUid: string;data: SimilarQuery}> = (props) => {
          const {indexUid,data} = props ?? {};

          return  similarPost(indexUid,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SimilarPostMutationResult = NonNullable<Awaited<ReturnType<typeof similarPost>>>
    export type SimilarPostMutationBody = SimilarQuery
    export type SimilarPostMutationError = ResponseError

    /**
 * @summary Get similar documents with POST
 */
export const useSimilarPost = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof similarPost>>, TError,{indexUid: string;data: SimilarQuery}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof similarPost>>,
        TError,
        {indexUid: string;data: SimilarQuery},
        TContext
      > => {

      const mutationOptions = getSimilarPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    