/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * meilisearch
 * Meilisearch HTTP server
 * OpenAPI spec version: 1.15.2
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  GetLogs,
  ResponseError,
  UpdateStderrLogs
} from '../api.schemas';

import { customInstance } from '../../utils/orval/orval.utils';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * This route lets you specify at runtime the level of the console logs outputted on stderr.
 * @summary Update target of the console logs
 */
export const updateStderrTarget = (
    updateStderrLogs: UpdateStderrLogs,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/logs/stderr`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: updateStderrLogs, signal
    },
      options);
    }
  


export const getUpdateStderrTargetMutationOptions = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateStderrTarget>>, TError,{data: UpdateStderrLogs}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateStderrTarget>>, TError,{data: UpdateStderrLogs}, TContext> => {

const mutationKey = ['updateStderrTarget'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateStderrTarget>>, {data: UpdateStderrLogs}> = (props) => {
          const {data} = props ?? {};

          return  updateStderrTarget(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateStderrTargetMutationResult = NonNullable<Awaited<ReturnType<typeof updateStderrTarget>>>
    export type UpdateStderrTargetMutationBody = UpdateStderrLogs
    export type UpdateStderrTargetMutationError = ResponseError

    /**
 * @summary Update target of the console logs
 */
export const useUpdateStderrTarget = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateStderrTarget>>, TError,{data: UpdateStderrLogs}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateStderrTarget>>,
        TError,
        {data: UpdateStderrLogs},
        TContext
      > => {

      const mutationOptions = getUpdateStderrTargetMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Stream logs over HTTP. The format of the logs depends on the configuration specified in the payload.
The logs are sent as multi-part, and the stream never stops, so make sure your clients correctly handle that.
To make the server stop sending you logs, you can call the `DELETE /logs/stream` route.

There can only be one listener at a timeand an error will be returned if you call this route while it's being used by another client.
 * @summary Retrieve logs
 */
export const getLogs = (
    getLogs: GetLogs,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/logs/stream`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: getLogs, signal
    },
      options);
    }
  


export const getGetLogsMutationOptions = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getLogs>>, TError,{data: GetLogs}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof getLogs>>, TError,{data: GetLogs}, TContext> => {

const mutationKey = ['getLogs'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getLogs>>, {data: GetLogs}> = (props) => {
          const {data} = props ?? {};

          return  getLogs(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetLogsMutationResult = NonNullable<Awaited<ReturnType<typeof getLogs>>>
    export type GetLogsMutationBody = GetLogs
    export type GetLogsMutationError = ResponseError

    /**
 * @summary Retrieve logs
 */
export const useGetLogs = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getLogs>>, TError,{data: GetLogs}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof getLogs>>,
        TError,
        {data: GetLogs},
        TContext
      > => {

      const mutationOptions = getGetLogsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Call this route to make the engine stops sending logs through the `POST /logs/stream` route.
 * @summary Stop retrieving logs
 */
export const cancelLogs = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/logs/stream`, method: 'DELETE'
    },
      options);
    }
  


export const getCancelLogsMutationOptions = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelLogs>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof cancelLogs>>, TError,void, TContext> => {

const mutationKey = ['cancelLogs'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cancelLogs>>, void> = () => {
          

          return  cancelLogs(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CancelLogsMutationResult = NonNullable<Awaited<ReturnType<typeof cancelLogs>>>
    
    export type CancelLogsMutationError = ResponseError

    /**
 * @summary Stop retrieving logs
 */
export const useCancelLogs = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelLogs>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof cancelLogs>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCancelLogsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    