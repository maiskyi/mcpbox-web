/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * meilisearch
 * Meilisearch HTTP server
 * OpenAPI spec version: 1.15.2
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import type {
  FacetSearchQuery,
  ResponseError,
  SearchResult,
} from '../api.schemas';

import { customInstance } from '../../utils/orval/orval.utils';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Search for a facet value within a given facet.
 * @summary Perform a facet search
 */
export const search = (
  indexUid: string,
  facetSearchQuery: FacetSearchQuery,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SearchResult>(
    {
      url: `/indexes/${indexUid}/facet-search`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: facetSearchQuery,
      signal,
    },
    options,
  );
};

export const getSearchMutationOptions = <
  TError = ResponseError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof search>>,
    TError,
    { indexUid: string; data: FacetSearchQuery },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof search>>,
  TError,
  { indexUid: string; data: FacetSearchQuery },
  TContext
> => {
  const mutationKey = ['search'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof search>>,
    { indexUid: string; data: FacetSearchQuery }
  > = (props) => {
    const { indexUid, data } = props ?? {};

    return search(indexUid, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SearchMutationResult = NonNullable<
  Awaited<ReturnType<typeof search>>
>;
export type SearchMutationBody = FacetSearchQuery;
export type SearchMutationError = ResponseError;

/**
 * @summary Perform a facet search
 */
export const useSearch = <
  TError = ResponseError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof search>>,
    TError,
    { indexUid: string; data: FacetSearchQuery },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof search>>,
  TError,
  { indexUid: string; data: FacetSearchQuery },
  TContext
> => {
  const mutationOptions = getSearchMutationOptions(options);

  return useMutation(mutationOptions);
};
