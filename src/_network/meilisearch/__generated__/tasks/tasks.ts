/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * meilisearch
 * Meilisearch HTTP server
 * OpenAPI spec version: 1.15.2
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AllTasks,
  CancelTasksParams,
  DeleteTasksParams,
  GetTasksParams,
  ResponseError,
  SummarizedTaskView,
  TaskView
} from '../api.schemas';

import { customInstance } from '../../utils/orval/orval.utils';
import { customQueryOptions } from '../../utils/orval/orval.utils';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Get all [tasks](https://docs.meilisearch.com/learn/advanced/asynchronous_operations.html)
 * @summary Get all tasks
 */
export const getTasks = (
    params?: GetTasksParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<AllTasks>(
      {url: `/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTasksQueryKey = (params?: GetTasksParams,) => {
    return [`/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const useGetTasksInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getTasks>>, TError = ResponseError>(params?: GetTasksParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTasksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTasks>>> = ({ signal, pageParam }) => getTasks({...params, 'skip': pageParam || params?.['skip']}, requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTasksInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getTasks>>>
export type GetTasksInfiniteQueryError = ResponseError


/**
 * @summary Get all tasks
 */

export function useGetTasksInfinite<TData = Awaited<ReturnType<typeof getTasks>>, TError = ResponseError>(
 params?: GetTasksParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetTasksInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetTasksQueryOptions = <TData = Awaited<ReturnType<typeof getTasks>>, TError = ResponseError>(params?: GetTasksParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTasksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTasks>>> = ({ signal }) => getTasks(params, requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getTasks>>>
export type GetTasksQueryError = ResponseError


/**
 * @summary Get all tasks
 */

export function useGetTasks<TData = Awaited<ReturnType<typeof getTasks>>, TError = ResponseError>(
 params?: GetTasksParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetTasksQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete [tasks](https://docs.meilisearch.com/learn/advanced/asynchronous_operations.html) on filter
 * @summary Delete tasks
 */
export const deleteTasks = (
    params?: DeleteTasksParams,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SummarizedTaskView>(
      {url: `/tasks`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteTasksMutationOptions = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTasks>>, TError,{params?: DeleteTasksParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTasks>>, TError,{params?: DeleteTasksParams}, TContext> => {

const mutationKey = ['deleteTasks'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTasks>>, {params?: DeleteTasksParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteTasks(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTasksMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTasks>>>
    
    export type DeleteTasksMutationError = ResponseError

    /**
 * @summary Delete tasks
 */
export const useDeleteTasks = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTasks>>, TError,{params?: DeleteTasksParams}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteTasks>>,
        TError,
        {params?: DeleteTasksParams},
        TContext
      > => {

      const mutationOptions = getDeleteTasksMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Cancel enqueued and/or processing [tasks](https://www.meilisearch.com/docs/learn/async/asynchronous_operations)
 * @summary Cancel tasks
 */
export const cancelTasks = (
    params?: CancelTasksParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SummarizedTaskView>(
      {url: `/tasks/cancel`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getCancelTasksMutationOptions = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelTasks>>, TError,{params?: CancelTasksParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof cancelTasks>>, TError,{params?: CancelTasksParams}, TContext> => {

const mutationKey = ['cancelTasks'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cancelTasks>>, {params?: CancelTasksParams}> = (props) => {
          const {params} = props ?? {};

          return  cancelTasks(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CancelTasksMutationResult = NonNullable<Awaited<ReturnType<typeof cancelTasks>>>
    
    export type CancelTasksMutationError = ResponseError

    /**
 * @summary Cancel tasks
 */
export const useCancelTasks = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelTasks>>, TError,{params?: CancelTasksParams}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof cancelTasks>>,
        TError,
        {params?: CancelTasksParams},
        TContext
      > => {

      const mutationOptions = getCancelTasksMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Get a [task](https://www.meilisearch.com/docs/learn/async/asynchronous_operations)
 * @summary Get a task
 */
export const getTask = (
    taskUid: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TaskView>(
      {url: `/tasks/${taskUid}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTaskQueryKey = (taskUid: string,) => {
    return [`/tasks/${taskUid}`] as const;
    }

    
export const useGetTaskInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getTask>>, TError = ResponseError>(taskUid: string, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTaskQueryKey(taskUid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTask>>> = ({ signal }) => getTask(taskUid, requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTaskInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getTask>>>
export type GetTaskInfiniteQueryError = ResponseError


/**
 * @summary Get a task
 */

export function useGetTaskInfinite<TData = Awaited<ReturnType<typeof getTask>>, TError = ResponseError>(
 taskUid: string, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetTaskInfiniteQueryOptions(taskUid,options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetTaskQueryOptions = <TData = Awaited<ReturnType<typeof getTask>>, TError = ResponseError>(taskUid: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTaskQueryKey(taskUid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTask>>> = ({ signal }) => getTask(taskUid, requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getTask>>>
export type GetTaskQueryError = ResponseError


/**
 * @summary Get a task
 */

export function useGetTask<TData = Awaited<ReturnType<typeof getTask>>, TError = ResponseError>(
 taskUid: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = useGetTaskQueryOptions(taskUid,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



