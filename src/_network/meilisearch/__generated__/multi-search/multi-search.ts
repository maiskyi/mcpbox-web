/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * meilisearch
 * Meilisearch HTTP server
 * OpenAPI spec version: 1.15.2
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  FederatedSearch,
  FederatedSearchResult,
  ResponseError
} from '../api.schemas';

import { customInstance } from '../../utils/orval/orval.utils';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Bundle multiple search queries in a single API request. Use this endpoint to search through multiple indexes at once.
 * @summary Perform a multi-search
 */
export const multiSearchWithPost = (
    federatedSearch: FederatedSearch,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<FederatedSearchResult>(
      {url: `/multi-search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: federatedSearch, signal
    },
      options);
    }
  


export const getMultiSearchWithPostMutationOptions = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof multiSearchWithPost>>, TError,{data: FederatedSearch}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof multiSearchWithPost>>, TError,{data: FederatedSearch}, TContext> => {

const mutationKey = ['multiSearchWithPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof multiSearchWithPost>>, {data: FederatedSearch}> = (props) => {
          const {data} = props ?? {};

          return  multiSearchWithPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MultiSearchWithPostMutationResult = NonNullable<Awaited<ReturnType<typeof multiSearchWithPost>>>
    export type MultiSearchWithPostMutationBody = FederatedSearch
    export type MultiSearchWithPostMutationError = ResponseError

    /**
 * @summary Perform a multi-search
 */
export const useMultiSearchWithPost = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof multiSearchWithPost>>, TError,{data: FederatedSearch}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof multiSearchWithPost>>,
        TError,
        {data: FederatedSearch},
        TContext
      > => {

      const mutationOptions = getMultiSearchWithPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    