/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * meilisearch
 * Meilisearch HTTP server
 * OpenAPI spec version: 1.15.2
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  ResponseError,
  SummarizedTaskView
} from '../api.schemas';

import { customInstance } from '../../utils/orval/orval.utils';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Triggers a dump creation process. Once the process is complete, a dump is created in the
[dump directory](https://www.meilisearch.com/docs/learn/self_hosted/configure_meilisearch_at_launch#dump-directory).
If the dump directory does not exist yet, it will be created.
 * @summary Create a dump
 */
export const createDump = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SummarizedTaskView>(
      {url: `/dumps`, method: 'POST', signal
    },
      options);
    }
  


export const getCreateDumpMutationOptions = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDump>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createDump>>, TError,void, TContext> => {

const mutationKey = ['createDump'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createDump>>, void> = () => {
          

          return  createDump(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateDumpMutationResult = NonNullable<Awaited<ReturnType<typeof createDump>>>
    
    export type CreateDumpMutationError = ResponseError

    /**
 * @summary Create a dump
 */
export const useCreateDump = <TError = ResponseError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDump>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createDump>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCreateDumpMutationOptions(options);

      return useMutation(mutationOptions );
    }
    